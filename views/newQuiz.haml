%script{:type => "text/x-mathjax-config"}
  MathJax.Hub.Config({
  showProcessingMessages: false,
  tex2jax: { inlineMath: [['$','$'],['\\(','\\)']] }
  });
:javascript
  var Preview = {
    delay: 150,        // delay after keystroke before updating
  
    preview: null,     // filled in by Init below
    buffer: null,      // filled in by Init below
  
    timeout: null,     // store setTimout id
    mjRunning: false,  // true when MathJax is processing
    oldText: null,     // used to check if an update is needed
  
    //
    //  Get the preview and buffer DIV's
    //
    Init: function () {
      this.preview = document.getElementById("MathPreview");
      this.buffer = document.getElementById("MathBuffer");
    },
  
    //
    //  Switch the buffer and preview, and display the right one.
    //  (We use visibility:hidden rather than display:none since
    //  the results of running MathJax are more accurate that way.)
    //
    SwapBuffers: function () {
      var buffer = this.preview, preview = this.buffer;
      this.buffer = buffer; this.preview = preview;
      buffer.style.visibility = "hidden"; buffer.style.position = "absolute";
      preview.style.position = ""; preview.style.visibility = "";
    },
  
    //
    //  This gets called when a key is pressed in the textarea.
    //  We check if there is already a pending update and clear it if so.
    //  Then set up an update to occur after a small delay (so if more keys
    //    are pressed, the update won't occur until after there has been 
    //    a pause in the typing).
    //  The callback function is set up below, after the Preview object is set up.
    //
    Update: function () {
      if (this.timeout) {clearTimeout(this.timeout)}
      this.timeout = setTimeout(this.callback,this.delay);
    },
  
    //
    //  Creates the preview and runs MathJax on it.
    //  If MathJax is already trying to render the code, return
    //  If the text hasn't changed, return
    //  Otherwise, indicate that MathJax is running, and start the
    //    typesetting.  After it is done, call PreviewDone.
    //  
    CreatePreview: function () {
      Preview.timeout = null;
      if (this.mjRunning) return;
      var text = document.getElementById("MathInput").value;
      if (text === this.oldtext) return;
      this.buffer.innerHTML = this.oldtext = text;
      this.mjRunning = true;
      MathJax.Hub.Queue(
        ["Typeset",MathJax.Hub,this.buffer],
        ["PreviewDone",this]
      );
    },
  
    //
    //  Indicate that MathJax is no longer running,
    //  and swap the buffers to show the results.
    //
    PreviewDone: function () {
      this.mjRunning = false;
      this.SwapBuffers();
    }
  
  };
  
  //
  //  Cache a callback to the CreatePreview action
  //
  Preview.callback = MathJax.Callback(["CreatePreview",Preview]);
  Preview.callback.autoReset = true;  // make sure it can run more than once


%form.form-horizontal{:action => "/preguntas/new", :method => "POST", :name => "form-new-quiz", :role => "form"}
  .form-group
    %label.col-lg-2.control-label{:for => "titulo"} Texto de la pregunta
    .col-lg-8
      %textarea.form-control#MathInput{:onkeyup => "Preview.Update()", :autofocus => "", :name => "titulo", :rows => "5", :style => "margin-top:5px", :placeholder => "Introduce un texto para tu pregunta"}
  .form-group
    %label.col-lg-2.control-label{:for => "preview"} PrevisualizaciÃ³n
    .col-lg-8
      #MathPreview.form-control
      #MathBuffer.form-control{:style => "visibility:hidden; position:absolute; top:0; left: 0"}
      :javascript
        Preview.Init();





  .form-group
    %label.col-lg-2.control-label{:for => "tags"} Tags
    .col-lg-8
      %input.form-control{"data-role" => "tagsinput", :placeholder => "AÃ±ade tags a tu pregunta", :type => "text", :value => "", :name => "tags"}
  .form-group  
    .btn-group{"data-toggle" => "buttons"}
      %label.btn.btn-primary.active{:id => "resp-vf"}
        %input#option1{:checked => "", :name => "tipo", :type => "radio", :value => "vf"}
          Verdadero - Falso
      %label.btn.btn-primary{:id => "resp-corta"}
        %input#option2{:name => "tipo", :type => "radio", :value => "corta"}
          Respuesta corta
      %label.btn.btn-primary{:id => "resp-multiple"}
        %input#option3{:name => "tipo", :type => "radio", :value => "multiple"}
          Respuesta mÃºltiple
    #respuesta-vf
      %p Esto muestra el formlario de Verdadero y Falso.
      .form-group
        %label.col-lg-2.control-label{:for => "correcta"} Respuesta correcta
        .col-lg-8
          .radio.radio-inline
            %label
              %input#optionsRadios1{:checked => "", :name => "opciones", :type => "radio", :value => "true"}
                Verdadero
          .radio.radio-inline
            %label
              %input#optionsRadios2{:name => "opciones", :type => "radio", :value => "false"}
                Falso
    .respuesta#respuesta-corta
      Esto muestra el formlario de respuesta corta.
      .form-group
        %label.col-lg-2.control-label{:for => "correcta"} Respuesta corta
        .col-lg-8
          %input.form-control{:placeholder => "Respuesta corta", :type => "text", :name => "corta", :type => "corta"}
    .respuesta#respuesta-multiple
      Esto muestra el formlario de respuesta mÃºltiple.

    /%a.btn.btn-primary{"aria-controls" => "collapseExample", "aria-expanded" => "false", "data-toggle" => "collapse", :href => "#collapseExample"}
    /  Link with href
    /%button.btn.btn-primary{"aria-controls" => "collapseExample", "aria-expanded" => "false", "data-target" => "#collapseExample", "data-toggle" => "collapse", :type => "button"}
    /  Button with data-target
    /#collapseExample.collapse
    /  .well
    /    asdgdfgsdgh sfdgghgd


  %button.btn.btn-primary{:type => "submit"} Guardar